"""Mapping в python"""

# Python map() — это встроенная функция, которая позволяет обрабатывать и преобразовывать
# все элементы в итерируемом объекте без использования явного цикла for, методом, широко известным
# как сопоставление (mapping). map() полезен, когда вам нужно применить функцию преобразования
# к каждому элементу в коллекции или в массиве и преобразовать их в новый массив.

# map() — один из инструментов, поддерживающих стиль функционального программирования в Python.

# Например так мы рассчитаем квадратное значение каждого числа из списка с помощью цикла For:

numbers = [1, 2, 3, 4, 5]
squared = []
for i in numbers:
    squared.append(i ** 2)

print(squared)

# Когда вы запускаете этот цикл для чисел, вы получаете список квадратных значений.
# Цикл for перебирает числа и применяет к каждому значению операцию возведения в квадрат.
# Наконец, он сохраняет полученные значения в squared.

# Взгляните на следующую реализацию приведенного выше примера с map():

def square(number):
    return number ** 2

num_map = map(square, numbers)
print(list(num_map))

# square() — это функция преобразования, которая преобразует число в его квадратное значение.
# Вызов map() применяет square() ко всем значениям и возвращает итератор, который возвращает
# квадратные значения. Затем вызывается list() для map(), чтобы создать объект списка,
# содержащий квадратные значения.

# Поскольку map() написан на C и сильно оптимизирован, его внутренний подразумеваемый цикл
# может быть более эффективным, чем обычный цикл for в Python.
# Это одно из преимуществ использования map().

# Второе преимущество использования map() связано с потреблением памяти.
# С помощью цикла for вам нужно сохранить весь список в памяти вашей системы.
# С помощью map() вы получаете элементы по запросу, и только один элемент находится в памяти
# вашей системы в данный момент.

# В качестве другого примера предположим, что вам нужно преобразовать все элементы в списке
# из строки в целое число. Для этого вы можете использовать map() вместе с int() следующим образом:

str_nums = ["4", "8", "6", "5", "3", "2", "8", "9", "2", "5"]
int_nums = map(int, str_nums)
print(int_nums)
print(list(int_nums))

# map() применяет int() к каждому значению в str_nums.
# Поскольку map() возвращает итератор (объект map), вам понадобится вызов list(),
# чтобы вы могли превратить его в объект списка.
# Обратите внимание, что исходная последовательность не изменяется в процессеy

# Обработка множественных итераций с помощью map()
# Если вы предоставляете несколько итераций для map(), тогда функция преобразования должна
# принимать столько аргументов, сколько итераций, которые вы передаете.
# Каждая итерация map() будет передавать одно значение из каждой итерации в качестве аргумента функции.
# Итерация останавливается в конце самой короткой итерации.

# Рассмотрим следующий пример, в котором используется pow():
first_it = [1, 2, 3]
second_it = [4, 5, 6, 7]
res = list(map(pow, first_it, second_it))
print(res)

# pow() принимает два аргумента, x и y, и возвращает x в степени y.
# На первой итерации x будет 1, y будет 4, а результат будет 1.
# Во второй итерации x будет 2, y будет 5, а результат будет 32, и так далее.
# Последняя итерация равна длине самой короткой итерации, которой в данном случае является first_it.