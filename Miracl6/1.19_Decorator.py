# Пример декоратора
def decorator_function(func):
    def wrapper():
        print('Функция-обёртка!')
        print('Оборачиваемая функция: {}'.format(func))
        print('Выполняем обёрнутую функцию...')
        func()
        print('Выходим из обёртки')
    return wrapper

# Здесь decorator_function() является функцией-декоратором.
# Как вы могли заметить, она является функцией высшего порядка,
# так как принимает функцию в качестве аргумента, а также возвращает функцию.
# Внутри decorator_function() мы определили другую функцию, обёртку,
# так сказать, которая обёртывает функцию-аргумент и затем изменяет её поведение.
# Декоратор возвращает эту обёртку.

# Теперь посмотрим на декоратор в действии:
@decorator_function
def hello_world():
    print('Hello world!')

hello_world()

# Магия, не иначе!
# Просто добавив @decorator_function перед определением функции hello_world(),
# мы модифицировали её поведение.
# Однако как вы уже могли догадаться, выражение с @ является всего лишь синтаксическим сахаром
# для hello_world = decorator_function(hello_world).

# Иными словами, выражение @decorator_function вызывает decorator_function() с hello_world
# в качестве аргумента и присваивает имени hello_world возвращаемую функцию.

# Ещё пример более полезный
def benchmark(func):
    import time

    def wrapper():
        start = time.time()
        func()
        end = time.time()
        print('[*] Время выполнения: {} секунд.'.format(end-start))
    return wrapper

@benchmark
def fetch_webpage():
    import requests
    webpage = requests.get('https://google.com')

fetch_webpage()

# Здесь мы создаём декоратор, замеряющий время выполнения функции.
# Далее мы используем его на функции, которая делает GET-запрос к главной странице Google.
# Чтобы измерить скорость, мы сначала сохраняем время перед выполнением обёрнутой функции,
# выполняем её, снова сохраняем текущее время и вычитаем из него начальное.

# К этому моменту вы, наверное, начали осознавать, насколько полезными могут быть декораторы.
# Они расширяют возможности функции без редактирования её кода и являются гибким инструментом
# для изменения чего угодно.
