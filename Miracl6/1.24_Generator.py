"""Генераторы"""

# Генераторы — это объекты, выполнение которых можно возобновлять и приостанавливать.
# При этом они возвращают объект, который можно итерировать (возвращать каждое следующее значение
# по отдельности).
#
# Существуют следующие виды генераторов в Python [1]:
#
# Генераторные выражения — возвращают объекты, производящие результаты по запросу
# (обычно с помощью метода next());
# Генераторные функции — функции, которые возвращают значения каждой итерации.
# Однако вместо оператора return в них используется инструкция yield.
# Также для вызова генераторных функций используется цикл.


# Для создания объекта-генератора в Python можно использовать так называемое генераторное выражение,
# которое внутри себя использует цикл. В качестве примера рассмотрим пример генератора,
# который будет считать квадраты чисел от 1 до 4.
# Для создания такой последовательности используется функция range() [1]:

a = (i**2 for i in range(1,5))

# Для вызова значений генератора используется метод next().
# Причем, для вывода каждого нового значения, необходимо каждый раз вызвать метод next():

print(next(a))
print(next(a))
print(next(a))
print(next(a))

# Стоит обратить внимание, что если вызвать метод next() после вывода последнего элемента,
# генератор сотрет его из памяти и выдаст исключение StopIteration.


# В Python генератор можно создавать не только с помощью выражений,
# но и с помощью специальных генераторных функций.
# Единственным отличием от обычной функции будет лишь то, что в функциях-генераторах
# вместо оператора return используется инструкция yield, которая приостанавливает генератор
# и возвращает какое-то значение. В качестве примера создадим генераторную функцию для вычисления
# квадратов чисел от 1 до 4, как это было выше [1]:

def gen_sqr(m):
    for i in range (1,m):
        yield i**2

# Еще одной отличительной особенностью такой функции будет то, что вызывается она через цикл:

b = gen_sqr
for i in b(5):
    print(i)

# Таким образом, благодаря генераторам, в Python существует возможность оптимального
# и экономного использования памяти. Это делает Python универсальным и надежным средством
# для работы с производительными приложениями, а также с Big Data обработкой.