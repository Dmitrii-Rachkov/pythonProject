"""Лямда функция в Python"""

# Лямбда-функции в Python являются анонимными. Это означает, что функция безымянна.
# Как известно, ключевое слов def используется в Python для определения обычной функции.
# В свою очередь, ключевое слово  lambda  используется для определения анонимной функции.

# Лямбда-функция имеет следующий синтаксис.
# Lambda аргументы: выражение

# Лямбда-функции могут иметь любое количество аргументов, но у каждой может быть только одно выражение.
# Выражение вычисляется и возвращается. Эти функции могут быть использованы везде,
# где требуется объект-функция.

# Ниже представлен пример лямбда-функции,  удваивающей вводимое значение.

double_n = lambda x: x * 2
print(double_n(5))

# В вышеуказанном коде lambda x: x*2 — это лямбда-функция.
# Здесь x — это аргумент, а x*2 — это выражение, которое вычисляется и возвращается.
# Эта функция безымянная. Она возвращает функциональный объект с идентификатором double.
# Сейчас мы можем считать её обычной функцией.

# Лямбда функция
# 'double = lambda x: x*2'
# Эквивалентна
# def double(x):
# 		return x * 2

# Эта функция может иметь любое количество аргументов, но вычисляет и возвращает только одно значение
# Лямбда-функции применимы везде, где требуются объекты-функции
# Вы должны помнить, что  синтаксически лямбда-функция ограничена, позволяет представить
# всего одно выражение
# Они имеют множество вариантов применения в конкретных областях программирования, наряду  с другими
# типами выражений, используемых в функциях.

"""Различие между обычной функцией и лямбда-функцией"""

# Рассмотрим пример и попробуем понять различие между определением (Def) для обычной функции
# и lambda-функции.
# Этот код возвращает заданное значение, возведенное в куб:

def defined_cube(y):
    return y*y*y


lambda_cube = lambda y: y*y*y
print(defined_cube(2))
print(lambda_cube(2))

# Разберем вышеуказанный пример подробнее:

# Без использования лямбды:
# Здесь обе функции возвращают заданное значение, возведенное в куб.
# Но при использовании def, нам пришлось определить функцию с именем и defined_cube()
# дать ей входную величину.
# После выполнения нам также понадобилось возвратить результат, из того места,
# откуда была вызвана функция, и мы сделали это, используя ключевое слово return.

# С применением лямбды:
# Определение лямбды не включает оператор return, а всегда содержит возвращенное выражение.
# Мы также можем поместить определение лямбды в любое место, где ожидается функция,
# и нам не нужно присваивать его переменной. Так выглядят простые лямбда-функции.

# Мы используем лямбда-функцию, когда нам ненадолго требуется безымянная функция.
# В Python мы часто используем их как аргумент функции высшего порядка
# (функции, которая принимает другие функции в качестве аргументов).
# Лямбда-функции используют вместе с такими встроенными функциями как filter(), map(),reduce() и др.
# Давайте рассмотрим еще несколько распространенных вариантов использования лямбда-функций.

"""Пример с filter()"""

# Функция вызывается со всеми элементами в списке, и в результате возвращается новый список,
# содержащий элементы, для которых функция результирует в True.
# Вот пример использования функции filter() для отбора четных чисел из списка.

my_list = [1, 3, 4, 6, 10, 11, 15, 12, 14]
new_list = list(filter(lambda x: (x % 2 == 0), my_list))
print(new_list)

"""Пример с map()"""

# Функция map() принимает в качестве аргументов функцию и список.
# Функция вызывается со всеми элементами в списке, и в результате возвращается новый список,
# содержащий элементы, возвращенные данной функцией для каждого исходного элемента.
# Ниже пример использования функции map() для удвоения всех элементов списка.

current_list = [1, 3, 4, 6, 10, 11, 15, 12, 14]
new_list = list(map(lambda x: x * 2, current_list))
print(new_list)

"""Пример с reduce()"""

# Функция reduce() принимает в качестве аргументов функцию и список.
# Функция вызывается с помощью лямбда-функции и итерируемого объекта  и возвращается новый
# уменьшенный результат. Так выполняется повторяющаяся операцию над парами итерируемых объектов.
# Функция reduce() входит в состав модуля functools.

from functools import reduce


current_list_2 = [5, 15, 20, 30, 50, 55, 75, 60, 70]
summa = reduce((lambda x, y: x + y), current_list_2)
print(summa)

# Здесь результаты предыдущих двух элементов суммируются со  следующим элементом,
# и это продолжается до конца списка, вот так:
# 5+15+20+30+50+55+75+60+70

"""Лямбда и  списковое включение"""

# В этом примере мы будем использовать лямбда-функцию со списковым включением и лямбда-функцию
# с циклом for. Мы выведем на экран  таблицу из 10 элементов.

tables = [lambda x = x: x*10 for x in range(1, 11)]
for table in tables:
    print(table())

"""Лямбда и условные операторы"""

# Давайте рассмотрим использование условий if-else в лямбда-функции.
# Как вы знаете, Python позволяет нам использовать однострочные условия,
# и  именно их мы можем помещать в лямбда-функцию для обработки возвращаемого результата.

# Например, есть две цифры, и вы должны определить, какая из них представляет наибольшее число.
max_number = lambda a, b: a if a > b else b
print(max_number(3, 5))

"""Лямбда и множественные операторы"""

# Лямбда-функции не допускают использования нескольких операторов, однако мы можем создать
# две лямбда-функции, а затем вызвать вторую лямбда-функцию в качестве параметра для первой функции.
# Давайте попробуем найти второй по величине элемент, используя лямбду.

current_list = [[10,6,9],[0, 14, 16, 80],[8, 12, 30, 44]]
sorted_list = lambda x: (sorted(i) for i in x)
second_largest = lambda x, func: [y[len(y)-2] for y in func(x)]
result = second_largest(current_list, sorted_list)
print(result)

# В предыдущем примере, мы создали лямбда-функцию, которая сортирует каждый вложенный список
# в заданном списке. Затем этот список проходит как параметр для второй лямбда-функции,
# которая возвращает элемент n-2 из отсортированного списка, где  n — длина вложенного списка.

