"""Асинхронное программирование в python - часть 2"""
import asyncio

# Импортируем фрэймворк 'asyncio'
import asyncio

# Ключевое слово async перед функцией говорит о том что это асинхронная функция
# Такие функции называются корутины - сопрограммы, которые работают одновременно в одном потоке

async def print1():
    print(1)

# await - оператор ожидания, он говорит "подожди я отдыхаю"
async def print2():
    await asyncio.sleep(5)
    print(2)

async def print3():
    print(3)

async def main():
    task1 = asyncio.create_task(print1()) # готовим наши функции к запуску
    task2 = asyncio.create_task(print2())
    task3 = asyncio.create_task(print3())

    await task1
    await task2
    await task3

    # Или можем запустить вместе одновременно
    # await asyncio.gather(task1, task2, task3)

    # Или можем упаковать таски в список и распаковать в функции .gather
    # tasks = []
    # await asyncio.gather(*tasks)

    # Или ещё один способ с помощью асинхронного контекстного менеджера и метода TaskGroup()
    # async with asyncio.TaskGroup() as tg:
    #     tg.create_task(print1())
    #     tg.create_task(print2())
    #     tg.create_task(print3())

asyncio.run(main()) # запускаем событийный цикл, в котором происходит переключение между задачами
                    # и передаем точку входа main() с запуском

# Многопоточный подход упирацется в проблему блокировки глобального интерпретатора GIL
# В одну единицу времени может обрабатываться только один поток
# время на переключение между потоками делает многопоточность нерациональным
# В асинхронне все подпрограммы (корутины) работают в одном потоке и переключений нет
# Можно одну функцию (корутину) передать в другую при этом не нужно добавлять её в TaskGroup

# В многопоточном программирование есть состояние гонки.
# Например есть список и один поток опередил другой изменив состояние списка.
# Один поток подразумевает, что там старая информация, а другой уже сделал изменения и пошёл дальше.
# В асинхроне такого нет

# Для асинхронного подхода не подойдут стандартные библиотеки requests и т.д.
# Нужны специальные асинхронные библиотеки.
# Например для работы с интернетом нужна библия 'aiohttp'
# Для телеграм бота 'aiogram'
# Для базы SQLite нужна библия 'aiosqlite'



