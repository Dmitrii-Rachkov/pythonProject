class Person():
    """Создаём человека"""

    def __init__(self, name, age, height, weight):
        """Инициализируем атрибуты человека"""
        self.name = name
        self.age = age
        self.height = height
        self.weight = weight
        """Также можно задать значение по умолчанию, например IQ и он не обязательный атрибут в методе"""
        self.iq = 99

    def description_person(self):
        """Получение описания человека"""
        description = f"Это {self.name}, ему {self.age} лет, возраст {self.height}, вес {self.weight}, IQ {self.iq}"
        print(description)

    def get_weight(self):
        print(f"Вес нашего человека {self.weight}")

    def get_iq(self):
        print(f"Интеллект нашего человека {self.iq}")

    def update_iq(self, index):
        self.iq = index


man = Person("Dima", 30, 180, 100)
"""Создали человека"""
man.description_person()
"""Описали человека"""
man.get_weight()
"""Получили вес человека"""

"""Запустить метод показывающий IQ по умолчанию"""
man.get_iq()

"""Например человек отупел и мы хотим изменить его уровень IQ"""
man.iq = 84
man.get_iq()

girl = Person("Olga", 25, 178, 63)
girl.get_iq()
"""У всех остальных экземпляров классов IQ не изменился"""
"""Но менять так IQ у человека неверно с точки зрения разработки, поэтому
мы должны создать метод меняющий IQ нашего человека"""

girl.update_iq(110)
girl.get_iq()
"""Мы видим что интеллект нашей Olga изменился с 99 до 110.
Это является правильным способом изменения параметров экземляра класса"""


"""НАСЛЕДОВАНИЕ.
Это процесс когда один класс наследует методы и свойства (атрибуты) другого класса.
Класс от которого наследуется другой класс называется родительским классом или супер-классом или предок.
Класс которые наследует методы и свойства называется потомком или дочерним классом."""
"""Создадим новый класс и унаследуем его от класса 'Person'"""


class Warrior(Person):
    """Создаём класс война"""

    def __init__(self, name, age, height, weight):
        """Инициализируем атрибуты класса родителя"""
        super().__init__(name, age, height, weight)
        """С помощью 'super()' мы связываем метод '__init__' потомка с методом '__init__' родителя.
        Благодаря этому мы можем получить все атрибуты родительского класса и нам их уже не надо
        перечислять в классе 'Warrior'. Дефолтовые значения атрибутов также наследуются (IQ).
        Также мы можем переопределить дефолтные значения."""

        self.fury = 70
        """Добавили значение супер-способности ярость для класса потомка война.
        У каждого потомка (лучника, мага) будут свои супер-способности"""

    def get_fury(self):
        print(f"Заряд ярости равен: {self.fury}")


warrior_1 = Warrior("Konan", 32, 200, 150)
"""Создали война"""
warrior_1.update_iq(130)
"""Переопределили значение IQ для война"""
warrior_1.description_person()
"""Получили новое описание война"""
warrior_1.get_fury()
"""Вызываем метод показывающий заряд ярости"""

"""Стоит сказать что в родительском классе мы не можем вызывать методы из потомка
т.е. наследование идёт только от родителя к потомку."""



