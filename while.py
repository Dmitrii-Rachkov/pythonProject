# цикл 'while' выполняется пока логическое выражение 'true'
# но в этом есть опасность в переполнении оперативной памяти
# ведь цикл может идти бесконечно в отличии от цикла 'for'
# поэтому в большинстве случаев автотестеры используют цикл 'for'

a = 10

# while a > 1:
#     print(a)
# 10 всегда больше чем 1 поэтому этот цикл бесконечный

while a < 1:
    print(a)
# 10 не меньше 1 поэтому этот цикл не выполняется

while a > 1:
    a = a - 1
    print(str(a) + " More")
# на первом шаге 10 больше 1 и цикл выполняется при этом
# на каждом цикле из a вычитается 1
# цикл остановился на этапе когда a = 1

b = 10

while b >= 1:
    b = b - 1
    print(str(b) + " Equal")
# ещё один пример когда переменная больше или равна 1

c = 10

while c >= 1:
    c -= 1
    print(str(c) + " Zero")
# c -= 1 позволяет нам сократить код и работает точно также как c - 1

# отличие цикла 'for' от 'while' в том, что цикл 'for' проходит по списку элементов
# цикл 'for' идеально подходит для списков
# если бы мы использовали цикл 'while', то нам бы пришлось бы измерить длину нашего списка
# с помощью функции 'len', это длину записать в переменную и только потом запустить цикл
# цикл 'while' хорошо подходит для одиночных элементов


